#itemdescription
##############################################################
replace_content<-function(dataset,scheme_n,item,pos_a,pos_q){
val_text<-"text" #tag, item
val_lead<-"lead" #tag, fragetext
val_descr<-"description" #tag, itemnumber
val_title<-"title" #tag, kontext
val_fail<-"tagfail"
#check flag 1:3
ifelse(pos_q==1,tag<-val_descr,ifelse(pos_q==2,tag<-val_lead,ifelse(pos_q==3,tag<-val_title,ifelse(pos_q!=1:3,tag<-val_fail))))
set_answers<-refresh_base_a(scheme_n)
set_question<-refresh_base_q(scheme_n)
#dataset<-dataset
print(tst_aq<-adress_question(set_question,item,pos_q))
print(tst_aa<-adress_answer(set_answers,item,pos_a))
print(tst_rq<-get_question(dataset,item,pos_q))
print(tst_ra<-get_item(dataset,item,pos_a))
#works
#works
#muster: xml_replace(adress_[answer|question](options),val,get_[item|question](options))
#testreplace xml_replace(tst2,val ,tst_r )
####
xml_replace(tst_aq,tag ,tst_rq )
xml_replace(tst_aa,val_text,tst_ra)
####
#works
}
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,1:6,3)
#refresh_data(xmlmod)
#setq<-refresh_base_q(schemeset)
#########################################################
refresh_base_q <- function(schemeset){
sroot<-schemeset
setq<-read_xml(-xml_children(xml_children(xml_children(sroot))))
#seta<-pos4<-xml_children(xml_children(xml_children(xml_children(sroot))))
#print(pos5<-xml_children(xml_children(xml_children(xml_children(xml_children(sroot))))))
#print(set_question)
#print(set_answers)
return(setq)
}
#########################################################
refresh_base_a <- function(schemeset){
sroot<-schemeset
# setq<-xml_children(xml_children(xml_children(sroot)))
seta<-read_xml(xml_children(xml_children(xml_children(xml_children(sroot)))))
#print(set_question)
#print(set_answers)
return(seta)
}
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,1:6,3)
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,1:6,3)
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,6,3)
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,6,3)
source("~/boxHKW/21S/essais/gith/12057/essais/12057.qscheme_essai_clean.R", echo=TRUE)
scheme<-init("old",1,xmlorigin)
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,6,3)
scheme<-init("old",1,xmlorigin)
##########################################################
#init variables
init<- function(set,opt,base_xml){
items<-refresh_data(datenset)
ifelse(set=="new",return(read_xml(base_xml)),ifelse(set=="mod",scheme<-read_xml(xmlmod),ifelse(set=="old",scheme<-read_xml(xmlorigin),return(items))))
seta<-refresh_base_a(base_xml)
setq<-refresh_base_q(base_xml)
#ifelse(set=="items",return(items))
ifelse(opt=="a",return(seta),ifelse(opt=="q",return(setq),return(items)))
}
scheme<-init("old",1,xmlorigin)
scheme<-init("old",1,xmlorigin)
##########################################################
#init variables
init<- function(set,opt,base_xml){
items<-refresh_data(datenset)
ifelse(set=="new",return(read_xml(base_xml)),ifelse(set=="mod",scheme<-read_xml(xmlmod),ifelse(set=="old",scheme<-read_xml(xmlorigin),return(items))))
#seta<-refresh_base_a(base_xml)
#setq<-refresh_base_q(base_xml)
#ifelse(set=="items",return(items))
ifelse(opt=="a",return(seta),ifelse(opt=="q",return(setq),return(items)))
}
scheme<-init("old",1,xmlorigin)
##########################################################
#init variables
init<- function(set,opt,base_xml){
items<-refresh_data(datenset)
ifelse(set=="new",return(read_xml(base_xml)),ifelse(set=="mod",scheme<-read_xml(xmlmod),ifelse(set=="old",scheme<-read_xml(xmlorigin),return(items))))
#seta<-refresh_base_a(base_xml)
#setq<-refresh_base_q(base_xml)
#ifelse(set=="items",return(items))
#ifelse(opt=="a",return(seta),ifelse(opt=="q",return(setq),return(items)))
}
scheme<-init("old",1,xmlorigin)
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,6,3)
##########################################################
#init variables
init<- function(set,opt,base_xml){
items<-refresh_data(datenset)
ifelse(set=="new",return(read_xml(base_xml)),ifelse(set=="mod",scheme<-read_xml(xmlmod),ifelse(set=="old",return(scheme<-read_xml(xmlorigin)),return(items))))
#seta<-refresh_base_a(base_xml)
#setq<-refresh_base_q(base_xml)
#ifelse(set=="items",return(items))
#ifelse(opt=="a",return(seta),ifelse(opt=="q",return(setq),return(items)))
}
scheme<-init("old",1,xmlorigin)
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,6,3)
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,6,3)
#refresh_data(xmlmod)
#setq<-refresh_base_q(schemeset)
#########################################################
refresh_base_q <- function(origin){
sroot<-origin
setq<-(xml_children(xml_children(xml_children(sroot))))
#seta<-pos4<-xml_children(xml_children(xml_children(xml_children(sroot))))
#print(pos5<-xml_children(xml_children(xml_children(xml_children(xml_children(sroot))))))
#print(set_question)
#print(set_answers)
return(setq)
}
#########################################################
refresh_base_a <- function(origin){
sroot<-orgin
# setq<-xml_children(xml_children(xml_children(sroot)))
seta<-(xml_children(xml_children(xml_children(xml_children(sroot)))))
#print(set_question)
#print(set_answers)
return(seta)
}
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,6,3)
#########################################################
refresh_base_a <- function(origin){
sroot<-origin
# setq<-xml_children(xml_children(xml_children(sroot)))
seta<-(xml_children(xml_children(xml_children(xml_children(sroot)))))
#print(set_question)
#print(set_answers)
return(seta)
}
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,6,3)
write_xml(scheme,"qscheme_output.xml")
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,6,3)
write_xml(scheme,"qscheme_output.xml")
#works 12062.14.17
##################
#now replace content
#itemdescription
##############################################################
replace_content<-function(dataset,scheme_n,item,pos_a,pos_q){
val_text<-"text" #tag, item
val_lead<-"lead" #tag, fragetext
val_descr<-"description" #tag, itemnumber
val_title<-"title" #tag, kontext
val_fail<-"tagfail"
#check flag 1:3
ifelse(pos_q==1,tag<-val_descr,ifelse(pos_q==2,tag<-val_title,ifelse(pos_q==3,tag<-val_lead,ifelse(pos_q!=1:3,tag<-val_fail))))
set_answers<-refresh_base_a(scheme_n)
set_question<-refresh_base_q(scheme_n)
#dataset<-dataset
print(tst_aq<-adress_question(set_question,item,pos_q))
print(tst_aa<-adress_answer(set_answers,item,pos_a))
print(tst_rq<-get_question(dataset,item,pos_q))
print(tst_ra<-get_item(dataset,item,pos_a))
#works
#works
#muster: xml_replace(adress_[answer|question](options),val,get_[item|question](options))
#testreplace xml_replace(tst2,val ,tst_r )
####
xml_replace(tst_aq,tag ,tst_rq )
xml_replace(tst_aa,val_text,tst_ra)
####
#works
}
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,6,3)
write_xml(scheme,"qscheme_output.xml")
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,1:6,1:3)
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,6,1:6,1)
write_xml(scheme,"qscheme_output.xml")
#####call replacement #################################
# discomment and rerun
replace_content(items,scheme,1:6,1:6,1)
for (k in 1:6){
replace_content(items,scheme,k,1:6,1)
}
write_xml(scheme,"qscheme_output.xml")
for (k in 1:16){
replace_content(items,scheme,k,1:6,1)
}
write_xml(scheme,"qscheme_output.xml")
for (k in 1:3){
replace_content(items,scheme,1:16,1:6,k)
}
write_xml(scheme,"qscheme_output.xml")
for (k1 in 1:16){
for (k2 in 1:3){
replace_content(items,scheme,k1,1:6,k2)
}
}
write_xml(scheme,"qscheme_output.xml")
source("~/boxHKW/21S/essais/gith/12057/essais/12057.qscheme_essai_clean.R", echo=TRUE)
#refresh_base()
#works
###########################################
replace_loop <- function(){
for (k1 in 1:16){
for (k2 in 1:3){
replace_content(items,scheme,k1,1:6,k2)
}
}
}
replace_loop()
source("~/boxHKW/21S/essais/gith/12057/essais/12057.qscheme_essai_clean.R", echo=TRUE)
#3
replace_loop()
datenset<-("https://github.com/esteeschwarz/12431_hux2021-appendix/raw/12057_VS/hux2022/proverbs/context2022_items_GR01.csv")
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
datenset<-("https://github.com/esteeschwarz/12431_hux2021-appendix/raw/12057_VS/hux2022/proverbs/context2022_items_GR01_GR04.csv")
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
#################
###########################################
lenth(items)
#################
###########################################
length(items)
#################
###########################################
length(items$item)
datenset<-("https://github.com/esteeschwarz/12431_hux2021-appendix/raw/12057_VS/hux2022/proverbs/context2022_items_GR01_GR04.csv")
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
datenset<-("https://github.com/esteeschwarz/12431_hux2021-appendix/raw/12057_VS/hux2022/proverbs/context2022_items_GR01_GR04.csv")
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
source("~/boxHKW/21S/essais/gith/12057/essais/12057.qscheme_essai_clean.R", echo=TRUE)
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
##########################################################
#init variables
init<- function(set,opt,base_xml){
items<-refresh_data(datenset)
ifelse(set=="new",return(read_xml(base_xml)),ifelse(set=="mod",scheme<-read_xml(xmlmod),ifelse(set=="old",return(scheme<-read_xml(xmlorigin)),return(items))))
#seta<-refresh_base_a(base_xml)
#setq<-refresh_base_q(base_xml)
#ifelse(set=="items",return(items))
#ifelse(opt=="a",return(seta),ifelse(opt=="q",return(setq),return(items)))
}
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
#sroot<-scheme
#}# > not needed
#########################################################
refresh_data <- function(ret_file){
items<-read.csv(ret_file,skip=1)
}# > not needed
items<-refresh_data(datenset)
items<-refresh_data(datenset)
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
#################
###########################################
length(items$item)
View(items)
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
source("~/boxHKW/21S/essais/gith/12057/essais/12057.qscheme_essai_clean.R", echo=TRUE)
source("~/boxHKW/21S/essais/gith/12057/essais/12057.qscheme_essai_clean.R", echo=TRUE)
items<-read.csv(datenset,skip=1)
items<-read.csv(datenset,skip=0)
items<-read.csv(datenset,skip=1,sep=";")
View(items)
#################
########################################
length(items$item )
replace_loop <- function(){
la<-length(items$item)
for (k1 in 1:la){
for (k2 in 1:3){
replace_content(items,scheme,k1,1:6,k2)
}
}
}
#3
replace_loop()
#2
scheme<-init("old",1,xmlorigin)
#sroot<-scheme
#}# > not needed
#########################################################
refresh_data <- function(ret_file){
items<-read.csv(datenset,skip=1,sep=";")
}# > not needed
#seta<-refresh_base_a(schemeset)
#setq<-refresh_base_q(schemeset)
######## run routine: ##############################
#1
items<-init("items",1,1)
#2
scheme<-init("old",1,xmlorigin)
#3
replace_loop()
#4
write_xml(scheme,"qscheme_output.xml")
source("~/boxHKW/21S/essais/gith/12057/essais/12057.qscheme_essai_clean.R", echo=TRUE)
source("~/boxHKW/21S/essais/gith/12057/essais/12057.qscheme_essai_clean.R", echo=TRUE)
#2
scheme<-init("mod",1,base_xml) #values: old=original scheme, mod=modified scheme
#2
scheme<-init("new",1,base_xml) #values: old=original scheme, mod=modified scheme
#2
scheme<-init("mod",1,base_xml) #values: old=original scheme, mod=modified scheme
xmlmod<-("qscheme_output.xml")
#2
scheme<-init("mod",1,base_xml) #values: old=original scheme, mod=modified scheme
#5.now loop through the items and replace according to table actualise
# loop replacement
#save substitutions in new scheme
## >>>>>>> obsolete, called in replace_loop above, only run for single replacements
#6. ######## TODO: ############
#
###########################################################
proof<-function(item,ax,qx){
print("in dataset")
print(get_question(items,item,qx))
print(get_item(items,item,ax))
print("#############################################")
print("in scheme")
print(adress_question(setq,item,qx))
print(adress_answer(seta,item,ax))
}
proof(6,6,3)
#5.now loop through the items and replace according to table actualise
# loop replacement
#save substitutions in new scheme
## >>>>>>> obsolete, called in replace_loop above, only run for single replacements
#6. ######## TODO: ############
#
###########################################################
proof<-function(item,ax,qx){
print("in dataset")
print(get_question(items,item,qx))
print(get_item(items,item,ax))
print("#############################################")
print("in scheme")
print(adress_question(refresh_base_q(scheme),item,qx))
print(adress_answer(refresh_base_a(scheme),item,ax))
}
proof(6,6,3)
#2
scheme<-init("new",1,base_xml) #values: old=original scheme, mod=modified scheme
proof(6,6,3)
#2
scheme<-init("old",1,base_xml) #values: old=original scheme, mod=modified scheme
View(scheme)
replace_loop()
#4
write_xml(scheme,"qscheme_output.xml")
proof(1,1,3)
get_item(items,1,1)
get_item(items,1,2)
itx<-1
itx<-1
####works
#####################################################
get_item<-function (dataset,item,option){
items<-dataset
itx<-item
newopt<-c()
#newopt[1]<-itx
#newopt[2]<-itx
newopt[1]<-items$A1[itx]
#newopt[4]<-11
newopt[2]<-items$A2[itx]
#newopt[6]<-22
newopt[3]<-items$A3[itx]
#newopt[8]<-33
newopt[4]<-items$A4[itx]
#newopt[10]<-44
newopt[5]<-items$A5[itx]
#newopt[12]<-55
newopt[6]<-items$A6[itx]
#newopt[14]<-66
return(newopt[option])
}
get_item(items,1,2)
source("~/boxHKW/21S/essais/gith/12057/essais/12057.qscheme_essai_clean.R", echo=TRUE)
replace_loop()
#4
write_xml(scheme,"qscheme_output.xml")
sch<-read_xml(xmlmod_git)
#2
scheme<-init("mod",1,base_xml) #values: old=original scheme, mod=modified scheme
##########################################################
#init variables
init<- function(set,opt,base_xml){
items<-refresh_data(datenset)
ifelse(set=="new",return(read_xml(base_xml)),ifelse(set=="mod",scheme<-print"MODD",ifelse(set=="old",return(scheme<-read_xml(xmlorigin)),return(items))))
#seta<-refresh_base_a(base_xml)
#setq<-refresh_base_q(base_xml)
#ifelse(set=="items",return(items))
#ifelse(opt=="a",return(seta),ifelse(opt=="q",return(setq),return(items)))
}
##########################################################
#init variables
init<- function(set,opt,base_xml){
items<-refresh_data(datenset)
ifelse(set=="new",return(read_xml(base_xml)),ifelse(set=="mod",scheme<-print"MODD",ifelse(set=="old",return(scheme<-read_xml(xmlorigin)),return(items))))
#seta<-refresh_base_a(base_xml)
#setq<-refresh_base_q(base_xml)
#ifelse(set=="items",return(items))
#ifelse(opt=="a",return(seta),ifelse(opt=="q",return(setq),return(items)))
}
##########################################################
#init variables
init<- function(set,opt,base_xml){
items<-refresh_data(datenset)
ifelse(set=="new",return(read_xml(base_xml)),ifelse(set=="mod",scheme<-print("MODD"),ifelse(set=="old",return(scheme<-read_xml(xmlorigin)),return(items))))
#seta<-refresh_base_a(base_xml)
#setq<-refresh_base_q(base_xml)
#ifelse(set=="items",return(items))
#ifelse(opt=="a",return(seta),ifelse(opt=="q",return(setq),return(items)))
}
#2
scheme<-init("mod",1,base_xml) #values: old=original scheme, mod=modified scheme
##########################################################
#init variables
init<- function(set,opt,base_xml){
items<-refresh_data(datenset)
ifelse(set=="new",return(read_xml(base_xml)),ifelse(set=="mod",return(scheme<-read_xml(xmlmod)),ifelse(set=="old",return(scheme<-read_xml(xmlorigin)),return(items))))
#seta<-refresh_base_a(base_xml)
#setq<-refresh_base_q(base_xml)
#ifelse(set=="items",return(items))
#ifelse(opt=="a",return(seta),ifelse(opt=="q",return(setq),return(items)))
}
#2
scheme<-init("mod",1,base_xml) #values: old=original scheme, mod=modified scheme
#sch<-read_xml(xmlmod_git)
proof(1,1,3)
#sch<-read_xml(xmlmod_git)
proof(8,1,3)
